[
  {
    "objectID": "portfolio.html",
    "href": "portfolio.html",
    "title": "Portfolio",
    "section": "",
    "text": "This data science project portfolio showcases Alice’s work in data analysis, visualization, and modeling.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing IGV and ClinGen to assess a putative autoimmune disease variant\n\n\n\n\n\n\nClinGen\n\n\nIGV\n\n\n\nUse IGV and ClinGen to assess clinically relevant sequence variation near a self-reactive TCR target.\n\n\n\n\n\nJun 18, 2024\n\n\nAlice MacQueen\n\n\n\n\n\n\n\n\n\n\n\n\nUsing OLGA to simulate T-cell receptor sequence diversity to assess genomic assay biases\n\n\n\n\n\n\npython\n\n\nsimulation\n\n\n\nUse OLGA to simulate T-cell receptor sequence diversity as part of a workflow to understand & correct assay biases between production and in-development assay versions.\n\n\n\n\n\nJun 3, 2024\n\n\nAlice MacQueen\n\n\n\n\n\n\n\n\n\n\n\n\nVisualize Multiple Overlaps with UpSet\n\n\n\n\n\n\nR\n\n\ndata visualization\n\n\n\nVisualize the relationships between many sets using the ComplexUpset package on switchgrass flowering date data\n\n\n\n\n\nMay 20, 2024\n\n\nAlice MacQueen\n\n\n\n\n\n\n\n\n\n\n\n\nModeling US Population Growth & Demography with a Novel Disease\n\n\n\n\n\n\nR\n\n\nSIR\n\n\nlogistic growth model\n\n\n\nUsing Logistic Growth Models to model US Population Demographic Changes with a novel (fictional) disease\n\n\n\n\n\nApr 4, 2024\n\n\nAlice MacQueen\n\n\n\n\n\n\n\n\n\n\n\n\nCalculating narrow-sense heritability\n\n\n\n\n\n\nrrBLUP\n\n\nR\n\n\ntransform\n\n\nmodel\n\n\ndescriptive statistics\n\n\n\nEstimating the genetic component of yield using the rrBLUP package on switchgrass biomass data from a diversity panel\n\n\n\n\n\nApr 3, 2024\n\n\nAlice MacQueen\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "portfolio/2024-04-04-GDS-population-model/index.html",
    "href": "portfolio/2024-04-04-GDS-population-model/index.html",
    "title": "Modeling US Population Growth & Demography with a Novel Disease",
    "section": "",
    "text": "Here’s a population modeling project from the writer Eugene Fischer. He is thinking about writing a follow-up story to his award winning novella, The New Mother, and wanted to know how the fictional disease he invented for The New Mother could impact demographics in the US population 50 years after the events of that story.\nThe disease in The New Mother is called GDS - Gamete Diploidy Syndrome. It’s a sexually transmitted disease that converts men & women’s gametes, normally haploid, into diploid gametes. As the novella puts it, this means:\nSo, what are the population-level impacts of this 50 years later? And how do we model the demographic shift towards more people who are assigned female at birth (AFAB)?"
  },
  {
    "objectID": "portfolio/2024-04-04-GDS-population-model/index.html#disease-transmission-model",
    "href": "portfolio/2024-04-04-GDS-population-model/index.html#disease-transmission-model",
    "title": "Modeling US Population Growth & Demography with a Novel Disease",
    "section": "Disease Transmission Model",
    "text": "Disease Transmission Model\nI first considered using a classic model of disease, the SIR model, to model GDS, and then use logistic growth models to look at the susceptible and infected individuals (individuals without and with GDS, respectively) using different growth parameters.\nThe SIR model is a differential equation model, with many variants, used to mathematically model the spread of an infectious disease through a population.\nI was able to show Eugene effects of changing details of the SIR model very quickly using Sinead Morris’s nice shinySIR package.\n\nlibrary(\"devtools\")\n\ninstall_github(\"SineadMorris/shinySIR\")\nlibrary(shinySIR)\n\nrun_shiny(model = \"SIR\")\n\nHowever, most SIR model variants proved unsuitable right away, because GDS is a permanent condition - there are no Removed individuals (the “R” in SIR - these can be immune or deceased individuals), and individuals do not become susceptible again (SIS models). There is a maternal effect of this disease, but unlike in MSIR models where there is a brief window of maternally-imparted immunity, babies born with this disease remain infected for life and can pass it on to their offspring in turn.\nSo, I decided SIR models wouldn’t work for the disease transmission portion of this project."
  },
  {
    "objectID": "portfolio/2024-04-04-GDS-population-model/index.html#sexually-transmitted-disease-models",
    "href": "portfolio/2024-04-04-GDS-population-model/index.html#sexually-transmitted-disease-models",
    "title": "Modeling US Population Growth & Demography with a Novel Disease",
    "section": "Sexually Transmitted Disease Models",
    "text": "Sexually Transmitted Disease Models\nGDS is an uncurable STD, meaning SIR models weren’t really appropriate.\nMy next idea was to look up information for other sexually transmitted diseases. I went into a brief cul-de-sac exploring parameters that would influence the number of people GDS was passed on to. To explore that, I needed to know how many sexual partners Americans have on average. This study (Haderxhanaj et al. 2014) looks at the number of sexual partners Americans from ages 15-44 have, using ~20K individuals with data from 2006-2010, and would help for estimating this.\nHowever, this still seemed like it would be much more complicated than necessary as I would then need to include different probabilities of transmission across different demographic bins, and my aim was to build a model quickly without unnecessary complications.\n\nAn Empirical Model\nMy next idea was to see if we could base GDS transmission in our model off of a real sexually transmitted disease that we have empirical data for. My first thought was to look for HIV transmission rates and I quickly found a very nice study of HIV transmission rates from seropositive to seronegative partners (Holtgrave et al. 2009).\nFrom Holtgrave:\n\nAn additional helpful measure would be the annual HIV transmission rate (\\(T\\)). Although various definitions of the HIV transmission rate are possible, we define it here as follows: for every 100 persons living with HIV, the number of HIV infections transmitted to HIV-seronegative partners in 1 year. The transmission rate for a given year, \\(x\\), is calculated as follows: \\(T(x) = [I(x)/P(x)] × 100\\) [where \\(I(x)\\) is the number of new HIV infections in year \\(x\\), and \\(P(x)\\) is the prevalence of persons living with HIV in year \\(x\\)]. Although a simple derivative of \\(I(x)\\) and \\(P(x)\\), the transmission rate provides an important gauge of the speed of spread of HIV infection. Further, by examining trends in \\(T(x)\\) over the course of the epidemic, it provides some crude indication of whether prevention efforts are serving to control the rapidity of the spread of the epidemic.\n\nThey provide this beautiful table that I decided to use to simply convert individuals from susceptible to infected as part of a two-population demographic model, at least for the first 30 years of the course of the spread of the disease. Given that the rate of transmission of HIV stabilized in the last 15 years of the study, it seemed reasonable to keep that transmission rate for the last 20 years of our 50 years as a rate of ‘unintended transmission’ for a known disease.\n\n\n\nHoltgrave et al 2009 Table 1. Annual HIV Transmission Rates per 100 Persons Living With HIV [T(x)], 1977-2006."
  },
  {
    "objectID": "portfolio/2024-04-04-GDS-population-model/index.html#demographic-model",
    "href": "portfolio/2024-04-04-GDS-population-model/index.html#demographic-model",
    "title": "Modeling US Population Growth & Demography with a Novel Disease",
    "section": "Demographic Model",
    "text": "Demographic Model\nNext, I considered the population growth model that I should build.\nThe population growth dynamics are also going to differ between the susceptible and infected populations over the course of 50 years. Crucially, infected individuals produce offspring that also join the infected pool. These individuals may also have a higher number of offspring and begin having children at an earlier age than individuals from the susceptible population, particularly if access to birth control is limited. This could cause a major demographic shift over 50 years, even if the transmission rate between infected and susceptible individuals is very low.\nI decided to use two logistic growth models, one for the susceptible population and one for the infected population. In a logistic growth model, the population grows at each time step as an exponential function of r, the population growth rate, and t, the length of the time step. I then overlaid transmission rate estimates from the HIV epidemic on to the yearly demographic estimates to determine how individuals move between these populations: there will be immigration from the susceptible to the infected pool caused by individuals becoming infected with GDS.\n\nWhen in doubt, use empirical parameter estimates\nI again decided to find empirical data to model the population growth rate r in the US. This website has the UN’s estimates for the US growth rate from now until 2102, more than sufficient for our purposes. Given that data and the yearly HIV transmission rate data, each time step, t, will be 1 year, and I will change the r values and T(x) values each year.\nNext, I built a table of these values. Remember, I was trying to do this quickly for a very small amount of data, so I just entered values by hand into vectors, then made a dataframe of the resulting vectors.\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nr_UN &lt;- c(0.53, 0.52, 0.51, 0.50, 0.49, 0.48, 0.48, 0.47, 0.45, 0.44, 0.43, 0.41, 0.40, 0.38, 0.36, 0.35, 0.33, 0.31, 0.29, 0.28, 0.26, 0.24, 0.23, 0.21, 0.20, 0.18, 0.17, 0.16, 0.15, 0.15, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.15, 0.15, 0.15, 0.15, 0.16, 0.16, 0.16, 0.16, 0.16, 0.15, 0.15, 0.15, 0.14, 0.14, 0.13, 0.12, 0.11, 0.1, 0.09, 0.08, 0.07, 0.07, 0.06) / 100\nT_HIV &lt;- c(100.4, 50.4, 33.7, 92.3, 48.3, 61.6, 38.6, 44.4, 31.4, 17.4, 15.3, 13.7, 12.6, 11.7, 6.6, 6.6, 6.6, 6.6, 6.6, 6.5, 7.5, 7.1, 6.8, 6.2, 5.9, 5.7, 5.5, 5.3, 5.2, 5.0, rep(5.0, 29))\nYear &lt;- c(2023:2081)\npop_model_df &lt;- tibble(Year = Year, T_HIV = T_HIV, r_UN = r_UN)\n\n\n\nRecapitulate the UN’s model\nAs a check of my logistic growth model, I first tried to recreate the UN’s population predictions for each year using the growth rates they provided.\nThis proved important because my first model was a logistic growth model with carrying capacity. This website makes it look like the US’s carrying capacity should be about 400 million people.\n[](U.S. Population 1950-2024)\nAs a quick model spot-check, I took the US population in 2023 (339 million), the r for that year (0.53%), and determined which model gave the current 2024 U.S. population (341 million). From the website:\n\nThe current population of U.S. in 2024 is 341,814,420, a 0.53% increase from 2023.\nThe population of U.S. in 2023 was 339,996,563, a 0.5% increase from 2022.\n\nFirst, the model with a carrying capacity parameter, K:\n\nK &lt;- 400000000\nP_2023 &lt;- 339996563\n\npop_model_df$P_0 &lt;- c(P_2023, rep(NA, 58))\n\n# 2024 population\nK * pop_model_df$P_0[1] * exp(pop_model_df$r_UN[1]) / (K + pop_model_df$P_0[1] * (exp(pop_model_df$r_UN[1]) - 1))\n\n[1] 340266375\n\n\nThis model accounts for carrying capacity but curbs growth too strongly to be realistic for our provided population data - the population is 340.2 million, too low by 1.6 million individuals.\nHere, instead, is a basic logistic growth model, without carrying capacity:\n\npop_model_df$P_0[1] * exp(pop_model_df$r_UN[1])\n\n[1] 341803328\n\n\nA basic logistic growth model without carrying capacity recreates the provided population data for 2024, given the r that was provided. So the empirical data has carrying capacity ‘baked in’ to the provided population growth rates.\nLast, I checked that I could accurately capture the UN’s future predictions with the model before I added complexity by making two separate models.\n\nfor (i in 1:50) {\n  pop_model_df$P_0[i + 1] &lt;-\n    pop_model_df$P_0[i] * exp(pop_model_df$r_UN[i])\n}\n\nhead(pop_model_df) |&gt; kable()\n\n\n\n\nYear\nT_HIV\nr_UN\nP_0\n\n\n\n\n2023\n100.4\n0.0053\n339996563\n\n\n2024\n50.4\n0.0052\n341803328\n\n\n2025\n33.7\n0.0051\n343585335\n\n\n2026\n92.3\n0.0050\n345342096\n\n\n2027\n48.3\n0.0049\n347073131\n\n\n2028\n61.6\n0.0048\n348777962\n\n\n\n\n\nA spot check of several years against the website’s predictions showed that this model accurately captures the UN’s demographic model for the US, to at least the first four digits.\n\n\nAdd a GDS population & GDS transmission\nOnce I was confident in the model, I added a layer of complexity. There are now two populations within the US: those infected with GDS (\\(P_{GDS}\\)) and susceptible (\\(P_S\\)), which freely mix. Individuals move from susceptible to infected with a probability \\((P_{GDS} * T_{HIV}) / 100\\). Without changing \\(r\\) for these two populations, what would \\(P_S\\) and \\(P_{GDS}\\) be after 50 years?\n\npop_model_df$P_GDS &lt;- c(10000, rep(NA, 58))\npop_model_df &lt;- pop_model_df |&gt;\n  mutate(P_S = P_0 - P_GDS)\n\ni &lt;- 1\n\nfor (i in 1:50) {\n  pop_model_df$P_GDS[i + 1] &lt;- pop_model_df$P_GDS[i] * T_HIV[i] / 100 +\n    pop_model_df$P_GDS[i]\n  pop_model_df$P_S[i + 1] &lt;- pop_model_df$P_0[i + 1] -\n    pop_model_df$P_GDS[i + 1]\n}\n\npop_model_df |&gt;\n  mutate(fraction_I = round(P_GDS / P_0, digits = 4)) |&gt;\n  filter(Year == 2073) |&gt;\n  kable()\n\n\n\n\nYear\nT_HIV\nr_UN\nP_0\nP_GDS\nP_S\nfraction_I\n\n\n\n\n2073\n5\n0.0013\n388477599\n6596083\n381881516\n0.017\n\n\n\n\n\nSo, if GDS appeared in the US and had HIV’s transmission rate, but did not affect population growth, then 50 years later, 6.5 million people would have GDS in the U.S. In other words, 1.7% of the population would be living with GDS.\n\n\nChange \\(r\\) for GDS\nNow I modeled births in each population separately, which means I set two population-specific growth rates. Let’s call the UN’s predicted growth rate \\(r_{UN}\\). The population with GDS now has twice as high a growth rate as the susceptible population: \\(r_{GDS} = r_{UN} * 2\\). This starts right at the beginning of the model and continues throughout. That will affect the total number of people in the U.S. - let’s call that \\(P_{US}\\), as well as \\(P_{GDS}\\) and \\(P_{S}\\) (S for susceptible; a common way to refer to unexposed, uninfected individuals in disease models); these will now need to be recalculated each year.\nI initialized the model in 2023 with a starting \\(P_{GDS}\\) of 10,000 individuals, and create a new \\(r_{GDS}\\) variable.\n\npop_model_df &lt;- pop_model_df |&gt;\n  mutate(r_GDS = r_UN * 2) |&gt;\n  rename(\n    P_UN_predicted = P_0, P_GDS_transmission_only = P_GDS,\n    P_S_transmission_only = P_S\n1  )\npop_model_df$P_GDS &lt;- c(10000, rep(NA, 58))\npop_model_df &lt;- pop_model_df |&gt;\n  mutate(\n    P_S = P_UN_predicted - P_GDS,\n    P_BOTH = P_S + P_GDS\n  )\n\nhead(pop_model_df, n = 3) |&gt;\n  kable()\n\n\n1\n\nRename our previous P_0 variable to reflect that it is the UN’s prediction for the US population size, as well as the P_GDS and P_S variables to reflect that these came from a model with transmission only.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYear\nT_HIV\nr_UN\nP_UN_predicted\nP_GDS_transmission_only\nP_S_transmission_only\nr_GDS\nP_GDS\nP_S\nP_BOTH\n\n\n\n\n2023\n100.4\n0.0053\n339996563\n10000.00\n339986563\n0.0106\n10000\n339986563\n339996563\n\n\n2024\n50.4\n0.0052\n341803328\n20040.00\n341783288\n0.0104\nNA\nNA\nNA\n\n\n2025\n33.7\n0.0051\n343585335\n30140.16\n343555195\n0.0102\nNA\nNA\nNA\n\n\n\n\n\nHere, I ran the model for 50 years, then looked at some population demographic parameters in 2073, 50 years later.\n\nfor (i in 1:50) {\n  pop_model_df$P_GDS[i + 1] &lt;- pop_model_df$P_GDS[i] * exp(pop_model_df$r_GDS[i]) + pop_model_df$P_GDS[i] * T_HIV[i] / 100\n  pop_model_df$P_S[i + 1] &lt;- pop_model_df$P_S[i] * exp(pop_model_df$r_UN[i]) - pop_model_df$P_GDS[i] * T_HIV[i] / 100\n}\n\npop_model_df |&gt;\n  mutate(\n    P_BOTH = P_S + P_GDS,\n    fraction_I = round(P_GDS / P_BOTH, digits = 4)\n  ) |&gt;\n  filter(Year == 2073) |&gt;\n  kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYear\nT_HIV\nr_UN\nP_UN_predicted\nP_GDS_transmission_only\nP_S_transmission_only\nr_GDS\nP_GDS\nP_S\nP_BOTH\nfraction_I\n\n\n\n\n2073\n5\n0.0013\n388477599\n6596083\n381881516\n0.0026\n8247270\n380471596\n388718866\n0.0212\n\n\n\n\n\nIf we start with 10K individuals with GDS, have a HIV-level rate of transmission and a growth rate that is twice as high in individuals with GDS, then in 50 years, 8.2 million people will have GDS, 2.1% of the US population.\n8.2 million is a step up from 6.5 million people, but not a big one! It’s not clear that a disease with this much penetrance would have a major impact on US politics or demography. But how do we explore effects on demography?\n\n\nExplore plausible GDS model parameters\nEugene and I brainstormed plausible ways to change the demographic model. We really wanted to know how these changes affected the sex ratio in the U.S. That involved separating out the growth rate of the GDS population due to transmission (which does not affect the sex ratio) from the growth rate of the GDS population due to births (who are all AFAB).\nHere I implement a model where people who received GDS via transmission and birth are separated. This model also had a consistent high growth rate, 8x higher than the 2024 US growth rate, for the population with GDS, of 4%:\n\n# 0.0639/0.005\nr_GDS_increase &lt;- 0.0639\nP_GDS_start &lt;- 10000\n\npop_model_df &lt;- pop_model_df |&gt;\n  mutate(r_GDS = r_GDS_increase)\npop_model_df$P_GDS &lt;- c(P_GDS_start, rep(NA, 58))\npop_model_df &lt;- pop_model_df |&gt;\n  mutate(P_S = P_UN_predicted - P_GDS)\npop_model_df$P_GDS_immigrants &lt;- NA\npop_model_df$P_GDS_births &lt;- NA\n\nfor (i in 1:50) {\n  pop_model_df$P_GDS_immigrants[i + 1] &lt;- round(pop_model_df$P_GDS[i] * T_HIV[i] / 100)\n  pop_model_df$P_GDS_births[i + 1] &lt;- round(pop_model_df$P_GDS[i] * exp(pop_model_df$r_GDS[i]) - pop_model_df$P_GDS[i])\n  pop_model_df$P_GDS[i + 1] &lt;- pop_model_df$P_GDS_immigrants[i + 1] +\n    pop_model_df$P_GDS_births[i + 1] + pop_model_df$P_GDS[i]\n  pop_model_df$P_S[i + 1] &lt;- pop_model_df$P_S[i] * exp(pop_model_df$r_UN[i]) - pop_model_df$P_GDS[i] * T_HIV[i] / 100\n}\n\npop_model_df |&gt;\n  mutate(\n    P_BOTH = P_S + P_GDS,\n    fraction_I = round(P_GDS / P_BOTH, digits = 4)\n  ) |&gt;\n  summarise(P_GDS_births = sum(P_GDS_births, na.rm = TRUE))\n\n# A tibble: 1 × 1\n  P_GDS_births\n         &lt;dbl&gt;\n1     63539715\n\n16922855 / 404976064\n\n[1] 0.0417873\n\n\nAt 8x higher a rate than the 2024 rate, there are 39M people with GDS in the US, 10% of the population. However, an r of 0.04 (4%) is very high; if that was by country, it’d be the third highest in the world.\n\n\nModel a plausible GDS birth rate\nFor reasons that will be explored in the novella, Eugene thought that the birth rate for women with GDS might end up being much higher than the US’s predicted birth rate. Still, maybe a rate of 4% was implausibly high. Eugene thought that a range of like 3-4 children per women for GDS seemed reasonable, maybe eventually trending down to 3.\nI wasn’t able to quickly work out the conversion used between number of children born per woman and yearly birth rate. The CDC does give a nice definition of how birth rate and population growth rate are related, but it is for women in the demographic range of 15 - 44. I was trying to model GDS without involving the complexity of demographic modeling, so I looked again at empirical data. Could I find a time period or country where the current fertility rate was over 3 children per woman? If so, what was the birth rate in that period?\nThe baby boom in the U.S. was a clear candidate - between 1950 and 1965, the fertility rate was between 3.0 and 3.6, and the birth rate was 24.26 dropping to 20.34 in this period. In Kenya in 2024, the fertility rate is 3.21 births per woman, and there are 27.071 births per 1000 women. In 2012, when the fertility rate was 4.178 births per women, the birth rate was 33.717. The current birth rate in the US is 12.009 births per 1000 women. That gave me a range for \\(r_{GDS}\\) of up to 0.0273 that seemed reasonable for a modern-day baby boom, which is about 5x the current growth rate in the U.S.\n\n#|\n(12.009 + 2.768 - 9.226) / 1000 # calculate Current U.S. r from births, deaths, immigration - this is approximately the correct rate for 2024\n\n[1] 0.005551\n\n(33.717 + 2.768 - 9.226) / 1000. # Kenya 2012 birth rate, fertility rate 4.178\n\n[1] 0.027259\n\n(27.071 + 2.768 - 9.226) / 1000. # Kenya 2024 birth rate, fertility rate 3.214\n\n[1] 0.020613\n\n(24.268 + 2.768 - 9.226) / 1000 # US 1950 birth rate, fertility rate 3.148\n\n[1] 0.01781\n\n0.0273 / 0.0053\n\n[1] 5.150943\n\n\nTo model all of these growth rates, I made a function to calculate the outcome in a dataframe (so we don’t copy and paste code any further).\n\nget_GDS_model &lt;- function(df, r_GDS = 0.02, P_GDS_start = 10000,\n                          N_year = 50) {\n  df &lt;- df |&gt;\n    mutate(r_GDS = r_GDS)\n  df$P_GDS &lt;- c(P_GDS_start, rep(NA, nrow(df) - 1))\n  df &lt;- df |&gt;\n    mutate(P_S = P_UN_predicted - P_GDS)\n  df$P_GDS_immigrants &lt;- NA\n  df$P_GDS_births &lt;- NA\n  df$P_S_births &lt;- NA\n\n  for (i in 1:N_year) {\n    df$P_GDS_immigrants[i + 1] &lt;-\n      round(df$P_GDS[i] * T_HIV[i] / 100)\n    df$P_GDS_births[i + 1] &lt;-\n      round(df$P_GDS[i] * exp(df$r_GDS[i]) -\n        df$P_GDS[i])\n    df$P_GDS[i + 1] &lt;- df$P_GDS_immigrants[i + 1] +\n      df$P_GDS_births[i + 1] + df$P_GDS[i]\n    df$P_S_births[i + 1] &lt;-\n      df$P_S[i] * exp(df$r_UN[i]) -\n      df$P_S[i]\n    df$P_S[i + 1] &lt;-\n      df$P_S[i] * exp(df$r_UN[i]) -\n      df$P_GDS[i] * T_HIV[i] / 100\n  }\n  df &lt;- df |&gt;\n    replace_na(list(\n      P_GDS_births = 0, P_S_births = 0,\n      P_GDS_immigrants = 0\n    )) |&gt;\n    mutate(\n      P_BOTH = P_S + P_GDS,\n      fraction_I = round(P_GDS / P_BOTH, digits = 4),\n      fraction_AFAB = (P_S_births * (100 / 205) + P_GDS_births) /\n        (P_GDS_births + P_S_births),\n      fraction_AMAB = (P_S_births * (105 / 205)) /\n        (P_GDS_births + P_S_births),\n      Total_I_births = cumsum(P_GDS_births),\n      Total_S_births = cumsum(P_S_births)\n    )\n  return(df)\n}\n\n\nWith an r of 2.7%, ~4 births per woman, the difference is 1.8% (50.9% women) in 2073, and 7.4 million girls were born with GDS.\nWith an r of 2.06%, ~3+ births per woman with GDS, the difference is 1.1% (50.57% women), and 4.5 million girls were born with GDS.\nWith an r of 1.78%, a 1950 Baby Boom rate, ~3+ births per woman with GDS, the difference is 0.9% (50.45% women), and 3.5 million girls were born with GDS.\n\nAn r of 2 - 2.7% probably has the most interesting science fictional implications. There, we have somewhere between 4 and 10 million girls born with GDS, which is enough to skew the sex ratio 1% to 2% overall. This effect would be more pronounced in younger demographics. Perhaps it is time to add a little demography - as political campaigns about getting the sex ratio back to 50:50 would almost certainly look at younger age cohort sex ratios, as these would probably be more alarmingly different.\nBy 2073, what fraction of people ages 18-34 are women, vs men? And what fraction of babies born that year are AFAB vs AMAB?\n\n\nAdd important demographic details\nFinally, we wanted to consider the most important demographic details - mostly, that the sex ratio should get more and more skewed as time goes on. In other words, younger age groups should have more skewed sex ratios than older groups.\nCurrent sex ratios are 105:100 AMAB:AFAB, according to this Pew research article.\nI looked at the fraction of babies born AFAB in 2073 in a model with \\(r_{GDS}\\) of 2%. The plot below shows how the fraction of AMAB babies born each year goes down over time in this model:\n\npop_df &lt;- get_GDS_model(pop_model_df, r_GDS = 0.0206)\n\npop_df |&gt;\n  filter(Year == 2073) |&gt;\n  select(fraction_I:fraction_AMAB) |&gt;\n  kable()\n\n\n\n\nfraction_I\nfraction_AFAB\nfraction_AMAB\n\n\n\n\n0.0371\n0.6498358\n0.3501642\n\n\n\n\npop_df |&gt;\n  ggplot(aes(x = Year, y = fraction_AMAB)) +\n  geom_line() +\n  ylim(c(0.3, 0.51)) +\n  labs(y = \"Fraction Male Babies\")\n\n\n\n\n\n\n\n\nThen, I summed up the number of people of both sexes who would be between 18 and 35 years old in 2073.\n\npop_df |&gt;\n  filter(between(Year, 2038, 2055)) |&gt;\n  mutate(\n    Total_I_cohort = cumsum(P_GDS_births),\n    Total_S_cohort = cumsum(P_S_births),\n    fraction_AFAB_cohort = (Total_S_cohort * (100 / 205) + Total_I_cohort) /\n      (Total_I_cohort + Total_S_cohort),\n    fraction_AMAB_cohort = (Total_S_cohort * (105 / 205)) /\n      (Total_I_cohort + Total_S_cohort)\n  ) |&gt;\n  filter(Year == 2055) |&gt;\n  select(fraction_AFAB_cohort:fraction_AMAB_cohort) |&gt;\n  kable()\n\n\n\n\nfraction_AFAB_cohort\nfraction_AMAB_cohort\n\n\n\n\n0.51269\n0.48731\n\n\n\n\n\n\n\n\n\n\n\nOther Considerations\n\n\n\n\n\nHere are a few other considerations I discussed with Eugene that were either important to think about for story purposes or were more complex to model & thus dropped to keep things simple.\n\nOf critical importance: reproductive freedom and access to hormonal birth control would effectively mean that births in the GDS population might not be any different than births in the U.S. population as a whole. Would society change enough for these women that there would really be sufficient motivation and ability to have many more children than the norm? That’s left as an exercise for the writer.\nBirth rates really matter here. Below I model 50 years in the future where there is transmission and births from GDS, but at the same rate as the U.S. population as a whole. Over these 50 years, there are 215K births total in the U.S. GDS population. That brings the fraction of women up from 50% to… 50.03%. Yet there are 7.3 million people living with GDS. Clearly, transmission is a much more important factor than births over a timescale of only 50 years, unless birth rates are really different between these groups.\n\n\n0.02 / 0.005\n\n[1] 4\n\nr_GDS_increase &lt;- 0.02\nP_GDS_start &lt;- 10000\n\npop_model_df &lt;- pop_model_df |&gt;\n  mutate(r_GDS = r_UN)\npop_model_df$P_GDS &lt;- c(P_GDS_start, rep(NA, 58))\npop_model_df &lt;- pop_model_df |&gt;\n  mutate(P_S = P_UN_predicted - P_GDS)\npop_model_df$P_GDS_immigrants &lt;- NA\npop_model_df$P_GDS_births &lt;- NA\n\nfor (i in 1:50) {\n  pop_model_df$P_GDS_immigrants[i + 1] &lt;- round(pop_model_df$P_GDS[i] * T_HIV[i] / 100)\n  pop_model_df$P_GDS_births[i + 1] &lt;- round(pop_model_df$P_GDS[i] * exp(pop_model_df$r_GDS[i]) - pop_model_df$P_GDS[i])\n  pop_model_df$P_GDS[i + 1] &lt;- pop_model_df$P_GDS_immigrants[i + 1] +\n    pop_model_df$P_GDS_births[i + 1] + pop_model_df$P_GDS[i]\n  pop_model_df$P_S[i + 1] &lt;- pop_model_df$P_S[i] * exp(pop_model_df$r_UN[i]) - pop_model_df$P_GDS[i] * T_HIV[i] / 100\n}\n\npop_model_df |&gt;\n  replace_na(list(P_GDS_births = 0)) |&gt;\n  mutate(\n    P_BOTH = P_S + P_GDS,\n    fraction_I = round(P_GDS / P_BOTH, digits = 4),\n    Total_births = cumsum(P_GDS_births)\n  ) |&gt;\n  filter(Year == 2073) |&gt;\n  mutate(\n    Fraction_women = round(((P_BOTH - Total_births) / 2 +\n      Total_births) / P_BOTH, digits = 4),\n    Difference = ((P_BOTH - Total_births) / 2 +\n      Total_births) / P_BOTH -\n      ((P_BOTH - Total_births) / 2) / P_BOTH\n  )\n\n# A tibble: 1 × 16\n   Year T_HIV   r_UN P_UN_predicted P_GDS_transmission_o…¹ P_S_transmission_only\n  &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;                 &lt;dbl&gt;\n1  2073     5 0.0013     388477599.               6596083.            381881516.\n# ℹ abbreviated name: ¹​P_GDS_transmission_only\n# ℹ 10 more variables: r_GDS &lt;dbl&gt;, P_GDS &lt;dbl&gt;, P_S &lt;dbl&gt;, P_BOTH &lt;dbl&gt;,\n#   P_GDS_immigrants &lt;dbl&gt;, P_GDS_births &lt;dbl&gt;, fraction_I &lt;dbl&gt;,\n#   Total_births &lt;dbl&gt;, Fraction_women &lt;dbl&gt;, Difference &lt;dbl&gt;\n\n\n\nIn the population with GDS, it may be better practice to model men & women differently. Only women are born in this population. As the sex ratio of the population with GDS becomes more skewed, this could further increase the growth rate of that population.\nImmigration also effects on the population growth rate: early on, once GDS is known and there is the strongest reaction against it, people may try and limit immigration of people with GDS. The humanitarian aspect would run counter to that, if there were countries where femicides were happening and there were lots of people with GDS that were refugees.\nFor the story, the demographic imbalance needs to be feel-able. 2 generations out, the U.S. is feeling the pressure of women being a demographic majority. It needs to feel like there are more women than men. But women don’t yet outnumber men to a degree that has overcome the historical imbalance in power between women and men.\nPlausibility: The demographic imbalance needs to be believable. 55% women 45% men - maybe. 60 - 40 - ok. 70/30 - really? There will be more societal factors countering that - places with access to hormonal birth control and the ability of women to choose when they are pregnant and how they get pregnant is significantly limited. For the story, in the 5% difference to 20% difference range, but those outcomes would feel very different."
  },
  {
    "objectID": "portfolio/2024-05-20-upset/index.html",
    "href": "portfolio/2024-05-20-upset/index.html",
    "title": "Visualize Multiple Overlaps with UpSet",
    "section": "",
    "text": "UpSet plots are a great way to visualize overlaps between datasets with more than three and less than about 30 sets. These plots are a clear way to scale up the visualization of overlaps from a Venn diagram, which usually don’t scale with clarity beyond three or four sets.\nAs such, UpSet plots are a great way to visualize overlaps between significant associations from multiple genome-wide associations (GWAS). These plots can visualize the genomic regions, or SNPs, that are significantly associated in one or more GWAS location, year, or trait. I use these plots as a preliminary visualization of overlaps between GWAS. Then, promising combinations of overlaps can be followed up with more detailed statistical analyses.\n\n# devtools::install_github(\"krassowski/complex-upset\")\nlibrary(ComplexUpset)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nI am going to make an UpSet plot using genomic regions that have a significant effect on flowering time in switchgrass in at least one location. These genomic regions are ones I have been analyzing as part of a revision to this paper.\n\n\n\n\n\n\nFigure 1: Plants (colored shapes) & Locations (bold block circles with X’s) used to get genetic effects on plant flowering date. Paper tl;dr: hundreds of switchgrass plants were collected from the locations of the colored shapes, cloned, and grown at eight common gardens where their flowering date was measured (gardens are bold black circles with X’s).\n\n\n\nFirst, I am going to load a supplementary dataset from the current revision of that paper.\n\n\n\n\n\n\nDataset Info\n\n\n\n\n\nThe dataset loaded here is a dataframe of SNP effects on flowering date for the Gulf subpopulation of switchgrass (the pink points on Figure 1. In this dataset, the first two columns have the following definitions:\n\nMarker: The SNP marker in the format Chromosome_Position\nlog10BF: log10(Bayes Factor) of the significance of the marker effect in the model jointly estimating SNP effects\n\nThe remaining column names follow the pattern Effect_[Mean/StandardError/lfsr]_[Subpopulation]_[Phenotype]_[Garden], where Mean and Standard Error are estimates of the effect mean and standard error, lfsr is the local false sign rate statistic for the effect, and [Subpopulation], [Phenotype], and [Garden] follow the conventions of Figure 1.\n\n\n\n\neffects &lt;- read_csv(file = \"Effects_dataset.csv\")\n\nRows: 50490 Columns: 26\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): Marker\ndbl (25): log10BF, Effect_Mean_Gulf_FloweringDate_TX1, Effect_StandardError_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThen, I will transform this dataset so that it is suitable for the Upset plot visualization. To do this, I need to add a set of new logical columns to the dataframe. Each column corresponds to one group in the Upset plot and the TRUE/FALSE value present in each row is the readout of whether that Marker is in that group.\nI want to plot SNPs with significant effects at more than one location. The ‘lfsr’ columns in this dataframe contain the p-values for the significance at each location. So I will create new columns based on the lfsr columns by transforming the continuous p-value into a logical vector, by assessing if each p-value is above or below a 5% threshold. I give each new column the abbreviation for the location’s name as in Figure 1, as these names will appear in the Upset visualization.\n\neffects &lt;- effects |&gt;\n  mutate(\n    TX1 = case_when(\n      Effect_lfsr_Gulf_FloweringDate_TX1 &lt;= 0.05 ~ TRUE,\n      Effect_lfsr_Gulf_FloweringDate_TX1 &gt; 0.05 ~ FALSE,\n      TRUE ~ NA\n    ),\n    TX2 = case_when(\n      Effect_lfsr_Gulf_FloweringDate_TX2 &lt;= 0.05 ~ TRUE,\n      Effect_lfsr_Gulf_FloweringDate_TX2 &gt; 0.05 ~ FALSE,\n      TRUE ~ NA\n    ),\n    TX3 = case_when(\n      Effect_lfsr_Gulf_FloweringDate_TX3 &lt;= 0.05 ~ TRUE,\n      Effect_lfsr_Gulf_FloweringDate_TX3 &gt; 0.05 ~ FALSE,\n      TRUE ~ NA\n    ),\n    OK = case_when(\n      Effect_lfsr_Gulf_FloweringDate_OK &lt;= 0.05 ~ TRUE,\n      Effect_lfsr_Gulf_FloweringDate_OK &gt; 0.05 ~ FALSE,\n      TRUE ~ NA\n    ),\n    MO = case_when(\n      Effect_lfsr_Gulf_FloweringDate_MO &lt;= 0.05 ~ TRUE,\n      Effect_lfsr_Gulf_FloweringDate_MO &gt; 0.05 ~ FALSE,\n      TRUE ~ NA\n    ),\n    NE = case_when(\n      Effect_lfsr_Gulf_FloweringDate_NE &lt;= 0.05 ~ TRUE,\n      Effect_lfsr_Gulf_FloweringDate_NE &gt; 0.05 ~ FALSE,\n      TRUE ~ NA\n    ),\n    MI = case_when(\n      Effect_lfsr_Gulf_FloweringDate_MI &lt;= 0.05 ~ TRUE,\n      Effect_lfsr_Gulf_FloweringDate_MI &gt; 0.05 ~ FALSE,\n      TRUE ~ NA\n    ),\n    SD = case_when(\n      Effect_lfsr_Gulf_FloweringDate_SD &lt;= 0.05 ~ TRUE,\n      Effect_lfsr_Gulf_FloweringDate_SD &gt; 0.05 ~ FALSE,\n      TRUE ~ NA\n    ),\n    .before = 3\n  )\n\nNext, I define a vector of column names that correspond to the groups I want to include in the Upset plot.\n\nlocations &lt;- colnames(effects)[3:10]\n\nNow I have the data in the right format for plotting, I make the Upset visualization, then iterate on it to improve it:\n\np &lt;- upset(effects, locations, name = \"Locations\", width_ratio = 0.1)\n\np\n\n\n\n\n\n\n\n\nThis first visualization has many, many combinations of groups, most of which have very small numbers of significant effects. Let’s make this plot easier to read by focusing on the groups with more effects, by setting the set size parameter min_size = 50:\n\np &lt;- upset(effects, locations, name = \"Locations\", width_ratio = 0.1, min_size = 50)\n\np\n\n\n\n\n\n\n\n\nBy far the most common group is one where the effect is not significant at any location. These aren’t interesting effects, so I remove this set from the visualization by filtering to include only sets with at least one member (by setting the set parameter min_degree = 1):\n\np &lt;- upset(effects, locations, name = \"Locations\", width_ratio = 0.1, min_size = 50, min_degree = 1)\n\np\n\n\n\n\n\n\n\n\nThe plot above is definitely an improvement. However, by default, Locations are sorted by set size, so locations with the largest number of significant effects - SD and MO - are at the top. Thinking back to Figure 1, the locations actually fall along a latitudinal gradient, so it would make more sense to retain this order for the locations in this plot. I adjust this by setting sort_sets=FALSE:\n\np &lt;- upset(effects, locations,\n  name = \"Locations\",\n  width_ratio = 0.1, min_size = 50, min_degree = 1, sort_sets = FALSE\n) +\n  ggtitle(\"Significant SNP Effects in Gulf plants for Flowering Date\")\n\np\n\n\n\n\n\n\n\n\nTo my eye, this Upset plot is clear enough for preliminary analysis. Several features of the data become apparent using this visualization:\n\nFirst, more SNP marker effects are significant at the northern locations than at the southern locations.\nThere is a possible superset in this data, in that the northernmost four sites seem to have distinct sets of significant markers compared to the southern four locations. This is surprising because the plants I plot here all come from the southern part of the range of switchgrass (they are the pink shapes in Figure 1).\nThere is also a sizeable group of markers that affect flowering date at most or all locations, though this group is smaller than the group of markers that affect flowering date at the northern locations.\n\n\n\n\nCitationBibTeX citation:@online{macqueen2024,\n  author = {MacQueen, Alice},\n  title = {Visualize {Multiple} {Overlaps} with {UpSet}},\n  date = {2024-05-20},\n  url = {https://alice-macqueen.github.io/posts/2024-05-20-upset/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nMacQueen, Alice. 2024. “Visualize Multiple Overlaps with\nUpSet.” May 20, 2024. https://alice-macqueen.github.io/posts/2024-05-20-upset/."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Alice MacQueen",
    "section": "",
    "text": "Alice MacQueen is a computational biologist with a Ph.D. from the University of Chicago and a background in quantitative population genetics. They focus on using molecular variation to solve problems that impact human well-being.\nSpecifically, Alice uses R to solve problems and generate insight in genomic datasets, including agricultural diversity panels and human immunological sequencing data, using linear mixed models, Bayesian multivariate adaptive shrinkage, and statistical association methods."
  },
  {
    "objectID": "index.html#data-science-project-portfolio",
    "href": "index.html#data-science-project-portfolio",
    "title": "Alice MacQueen",
    "section": "",
    "text": "Alice MacQueen is a computational biologist with a Ph.D. from the University of Chicago and a background in quantitative population genetics. They focus on using molecular variation to solve problems that impact human well-being.\nSpecifically, Alice uses R to solve problems and generate insight in genomic datasets, including agricultural diversity panels and human immunological sequencing data, using linear mixed models, Bayesian multivariate adaptive shrinkage, and statistical association methods."
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Resume",
    "section": "",
    "text": "Download Resume\nAlice’s Resume emphasizes their accomplishments as a computational biologist developing, using, and improving bioinformatic tools and open source software.\nPlease contact Alice via email if you’re interested in her academic resume, or view their portfolio if you’re interested in specific skills they have that could solve problems for your team."
  },
  {
    "objectID": "resume.html#alices-resume",
    "href": "resume.html#alices-resume",
    "title": "Resume",
    "section": "",
    "text": "Download Resume\nAlice’s Resume emphasizes their accomplishments as a computational biologist developing, using, and improving bioinformatic tools and open source software.\nPlease contact Alice via email if you’re interested in her academic resume, or view their portfolio if you’re interested in specific skills they have that could solve problems for your team."
  },
  {
    "objectID": "portfolio/2024-06-18-ClinGen/index.html",
    "href": "portfolio/2024-06-18-ClinGen/index.html",
    "title": "Using IGV and ClinGen to assess a putative autoimmune disease variant",
    "section": "",
    "text": "There is a cool biotech under development to identify the antigens for specific T cell receptors, by exposing the T cell to a library of (thousands to hundreds of thousands) cells expressing a wide variety of antigens. If the T cell recognizes an antigen, a specific reporter fluorescence molecule will be activated, and the library can be sorted for reporter activation and the sequence of the antigen determined using next generation sequencing (NGS) (Kula et al. 2019).\n\n\n\nGraphical Abstract for Kula et al., 2019 (Kula et al. 2019).\n\n\nThis technology is exciting because it can be used to screen for self-reactive TCRs, which could be important for developing therapeutics for specific autoimmune diseases. For example, the authors identify 4 human proteins recognized by a self-reactive TCR specific for a HLA-A1-restricted epitope of the gene MAGE-A3 (Kula et al. 2019; Karanikas et al. 2003): MAGE-A3, MAGE-A6, PLD5, and FAT2.\nNow, let’s check these genes in IGV and in ClinGen. Here are a few interesting questions to explore:\n\nWhat variation is present at these genes?\nIs this variation is implicated in skin cancer, or any other disease?\nIs common genetic variation is present in the identified epitopes? (This may influence TCR reactivity.)\n\nI pulled up the PLD5 gene in the web version of IGV - the epitope from the paper is at amino acids 179 to 187, so exon positions 537 to 561. To get a first overview of the variation within PLD5 and known disease implications, I searched for PLD5 in IGV, and pulled up the common SNPs and GWAS annotation tracks. There are five GWAS associations within PLD5:\n\n\n\nGWAS associations within PLD5\n\n\nThere are a couple of associations for N-glycosylation of IgG; one association is with coronary artery calcification among African Americans, and one is for a drug response to cytidine analogues. None of these seem particularly relevant to melanoma.\nThe fifth association is with squamous cell lung carcinoma - while not melanoma, this association with a familial disposition towards cancer could be of interest.\nI next searched ClinGen for these genes. However, none of them were in ClinGen’s databases of curated clinically relevant disease variants.\n\n\n\nPLD5 is not in ClinGen\n\n\nSo next I decided to check gnomAD, particularly as by doing so I could also check ClinVar.\nI wanted to look at SNPs in the exon of PLD5 which had the epitope recognized by the self-reactive TCR. As the epitope is at amino acids 179 to 187, I looked for sites with impacts on these amino acids (aka, HGVS Consequence matching 179 - 187). I downloaded the full gnomAD variant dataset for this gene to make searching it slightly easier.\n1-242524088-G-T\n\nPLD5 info from NCBI\n\n\nAssembly\nLocation\n\n\n\n\nGRCh38.p14 (GCF_000001405.40)\nNC_000001.11 (242082986..242530546, complement)\n\n\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(knitr)\npld5 &lt;- read_csv(\"gnomAD_v4.1.0_ENSG00000180287_2024_06_19_07_30_12.csv\")\n\nRows: 1972 Columns: 72\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (16): gnomAD ID, rsIDs, Reference, Alternate, Source, Filters - exomes, ...\ndbl (56): Chromosome, Position, ClinVar Variation ID, Allele Count, Allele N...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\npld5 |&gt; \n  arrange(desc(Position)) |&gt; \n  #filter(grepl(`HGVS Consequence`, \"[1][78][0-9]\")) #|&gt; \n  filter(between(Position, 242265383, 242265409)) |&gt; \n  kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngnomAD ID\nChromosome\nPosition\nrsIDs\nReference\nAlternate\nSource\nFilters - exomes\nFilters - genomes\nTranscript\nHGVS Consequence\nProtein Consequence\nTranscript Consequence\nVEP Annotation\nClinVar Clinical Significance\nClinVar Variation ID\nFlags\nAllele Count\nAllele Number\nAllele Frequency\nHomozygote Count\nHemizygote Count\nFilters - joint\nGroupMax FAF group\nGroupMax FAF frequency\ncadd\nrevel_max\nspliceai_ds_max\npangolin_largest_ds\nphylop\nsift_max\npolyphen_max\nAllele Count African/African American\nAllele Number African/African American\nHomozygote Count African/African American\nHemizygote Count African/African American\nAllele Count Admixed American\nAllele Number Admixed American\nHomozygote Count Admixed American\nHemizygote Count Admixed American\nAllele Count Ashkenazi Jewish\nAllele Number Ashkenazi Jewish\nHomozygote Count Ashkenazi Jewish\nHemizygote Count Ashkenazi Jewish\nAllele Count East Asian\nAllele Number East Asian\nHomozygote Count East Asian\nHemizygote Count East Asian\nAllele Count European (Finnish)\nAllele Number European (Finnish)\nHomozygote Count European (Finnish)\nHemizygote Count European (Finnish)\nAllele Count Middle Eastern\nAllele Number Middle Eastern\nHomozygote Count Middle Eastern\nHemizygote Count Middle Eastern\nAllele Count European (non-Finnish)\nAllele Number European (non-Finnish)\nHomozygote Count European (non-Finnish)\nHemizygote Count European (non-Finnish)\nAllele Count Amish\nAllele Number Amish\nHomozygote Count Amish\nHemizygote Count Amish\nAllele Count South Asian\nAllele Number South Asian\nHomozygote Count South Asian\nHemizygote Count South Asian\nAllele Count Remaining\nAllele Number Remaining\nHomozygote Count Remaining\nHemizygote Count Remaining\n\n\n\n\n1-242265407-T-C\n1\n242265407\nNA\nT\nC\ngnomAD Exomes\nPASS\nNA\nENST00000536534.7\np.Gln179Gln\np.Gln179Gln\nc.537A&gt;G\nsynonymous_variant\nNA\nNA\nNA\n1\n1612620\n6.0e-07\n0\n0\nPASS\nNA\nNA\n8.26\nNA\n0.00\n0.04\n1.080\nNA\nNA\n0\n75000\n0\n0\n0\n59848\n0\n0\n0\n29568\n0\n0\n0\n44812\n0\n0\n0\n63994\n0\n0\n0\n6046\n0\n0\n1\n1179350\n0\n0\n0\n912\n0\n0\n0\n90658\n0\n0\n0\n62432\n0\n0\n\n\n1-242265405-T-G\n1\n242265405\nNA\nT\nG\ngnomAD Exomes\nPASS\nNA\nENST00000536534.7\np.Asn180Thr\np.Asn180Thr\nc.539A&gt;C\nmissense_variant\nNA\nNA\nNA\n1\n1612690\n6.0e-07\n0\n0\nPASS\nNA\nNA\n22.60\n0.051\n0.00\n0.01\n3.120\n0.02\n0.031\n0\n74996\n0\n0\n0\n59850\n0\n0\n0\n29574\n0\n0\n0\n44810\n0\n0\n0\n63980\n0\n0\n0\n6046\n0\n0\n1\n1179376\n0\n0\n0\n912\n0\n0\n0\n90706\n0\n0\n0\n62440\n0\n0\n\n\n1-242265404-A-G\n1\n242265404\nrs760794546\nA\nG\ngnomAD Exomes\nPASS\nNA\nENST00000536534.7\np.Asn180Asn\np.Asn180Asn\nc.540T&gt;C\nsynonymous_variant\nNA\nNA\nNA\n2\n1612710\n1.2e-06\n0\n0\nPASS\nNA\nNA\n8.78\nNA\n0.02\n0.03\n-0.561\nNA\nNA\n0\n75014\n0\n0\n0\n59834\n0\n0\n0\n29574\n0\n0\n1\n44812\n0\n0\n0\n63980\n0\n0\n0\n6046\n0\n0\n0\n1179396\n0\n0\n0\n912\n0\n0\n0\n90704\n0\n0\n1\n62438\n0\n0\n\n\n1-242265402-A-G\n1\n242265402\nNA\nA\nG\ngnomAD Exomes\nPASS\nNA\nENST00000536534.7\np.Ile181Thr\np.Ile181Thr\nc.542T&gt;C\nmissense_variant\nNA\nNA\nNA\n1\n1612808\n6.0e-07\n0\n0\nPASS\nNA\nNA\n23.80\n0.374\n0.01\n0.02\n6.330\n0.00\n0.395\n0\n75008\n0\n0\n0\n59858\n0\n0\n0\n29574\n0\n0\n0\n44822\n0\n0\n0\n64000\n0\n0\n0\n6046\n0\n0\n1\n1179444\n0\n0\n0\n912\n0\n0\n0\n90704\n0\n0\n0\n62440\n0\n0\n\n\n1-242265401-A-G\n1\n242265401\nNA\nA\nG\ngnomAD Exomes\nPASS\nNA\nENST00000536534.7\np.Ile181Ile\np.Ile181Ile\nc.543T&gt;C\nsynonymous_variant\nNA\nNA\nNA\n1\n1612790\n6.0e-07\n0\n0\nPASS\nNA\nNA\n8.81\nNA\n0.01\n0.02\n-0.114\nNA\nNA\n0\n75002\n0\n0\n0\n59858\n0\n0\n0\n29566\n0\n0\n0\n44820\n0\n0\n0\n63994\n0\n0\n0\n6048\n0\n0\n1\n1179436\n0\n0\n0\n912\n0\n0\n0\n90718\n0\n0\n0\n62436\n0\n0\n\n\n1-242265400-C-T\n1\n242265400\nrs1244994670\nC\nT\ngnomAD Exomes\nPASS\nNA\nENST00000536534.7\np.Glu182Lys\np.Glu182Lys\nc.544G&gt;A\nmissense_variant\nNA\nNA\nNA\n2\n1612500\n1.2e-06\n0\n0\nPASS\nnfe\n3e-07\n21.60\n0.171\n0.00\n-0.01\n8.900\n0.88\n0.015\n0\n74958\n0\n0\n0\n59830\n0\n0\n0\n29570\n0\n0\n0\n44814\n0\n0\n0\n63962\n0\n0\n0\n6046\n0\n0\n2\n1179340\n0\n0\n0\n912\n0\n0\n0\n90640\n0\n0\n0\n62428\n0\n0\n\n\n1-242265392-C-T\n1\n242265392\nNA\nC\nT\ngnomAD Exomes\nPASS\nNA\nENST00000536534.7\np.Lys184Lys\np.Lys184Lys\nc.552G&gt;A\nsynonymous_variant\nNA\nNA\nNA\n1\n1612778\n6.0e-07\n0\n0\nPASS\nNA\nNA\n10.10\nNA\n0.02\n0.04\n5.040\nNA\nNA\n0\n74970\n0\n0\n0\n59876\n0\n0\n0\n29556\n0\n0\n0\n44820\n0\n0\n0\n63978\n0\n0\n0\n6052\n0\n0\n0\n1179464\n0\n0\n0\n912\n0\n0\n1\n90720\n0\n0\n0\n62430\n0\n0\n\n\n1-242265389-T-C\n1\n242265389\nNA\nT\nC\ngnomAD Exomes\nPASS\nNA\nENST00000536534.7\np.Leu185Leu\np.Leu185Leu\nc.555A&gt;G\nsynonymous_variant\nNA\nNA\nNA\n1\n1612956\n6.0e-07\n0\n0\nPASS\nNA\nNA\n14.20\nNA\n0.71\n0.51\n1.030\nNA\nNA\n0\n75012\n0\n0\n0\n59876\n0\n0\n0\n29578\n0\n0\n0\n44826\n0\n0\n0\n64004\n0\n0\n0\n6052\n0\n0\n1\n1179528\n0\n0\n0\n912\n0\n0\n0\n90722\n0\n0\n0\n62446\n0\n0\n\n\n1-242265387-A-G\n1\n242265387\nrs775543164\nA\nG\ngnomAD Exomes,gnomAD Genomes\nPASS\nPASS\nENST00000536534.7\np.Val186Ala\np.Val186Ala\nc.557T&gt;C\nmissense_variant\nUncertain significance\n3214673\nNA\n3\n1612882\n1.9e-06\n0\n0\nPASS\nnfe\n7e-07\n21.50\n0.172\n0.14\n0.18\n6.330\n0.72\n0.012\n0\n74886\n0\n0\n0\n59858\n0\n0\n0\n29576\n0\n0\n0\n44834\n0\n0\n0\n64012\n0\n0\n0\n6074\n0\n0\n3\n1179574\n0\n0\n0\n912\n0\n0\n0\n90732\n0\n0\n0\n62424\n0\n0\n\n\n1-242265386-C-T\n1\n242265386\nrs1364495756\nC\nT\ngnomAD Genomes\nNA\nPASS\nENST00000536534.7\np.Val186Val\np.Val186Val\nc.558G&gt;A\nsynonymous_variant\nNA\nNA\nNA\n1\n1612794\n6.0e-07\n0\n0\nPASS\nNA\nNA\n11.10\nNA\n0.27\n0.18\n3.590\nNA\nNA\n1\n74878\n0\n0\n0\n59854\n0\n0\n0\n29574\n0\n0\n0\n44836\n0\n0\n0\n63984\n0\n0\n0\n6072\n0\n0\n0\n1179550\n0\n0\n0\n912\n0\n0\n0\n90716\n0\n0\n0\n62418\n0\n0\n\n\n1-242265383-A-T\n1\n242265383\nrs772623416\nA\nT\ngnomAD Exomes\nPASS\nNA\nENST00000536534.7\np.Ser187Arg\np.Ser187Arg\nc.561T&gt;A\nmissense_variant\nNA\nNA\nNA\n3\n1612900\n1.9e-06\n0\n0\nPASS\nnfe\n3e-07\n24.00\n0.348\n0.07\n0.14\n0.424\n0.02\n0.927\n0\n74978\n0\n0\n0\n59850\n0\n0\n0\n29578\n0\n0\n0\n44822\n0\n0\n0\n63998\n0\n0\n0\n6050\n0\n0\n2\n1179572\n0\n0\n0\n912\n0\n0\n1\n90690\n0\n0\n0\n62450\n0\n0\n\n\n\n\n\nSo gnomAD has 11 SNPs in the epitope region of PLD5. None of them are particularly common (they all have allele frequencies of 1.860024e-06 or lower). Only one is in ClinVar as having Clinical Significance, but it is a missense variant of ‘Uncertain signficiance’. All but three of these rare alleles appear predominantly in the non-Finnish European population, with two in South Asian, one in East Asian, and one in an African American population.\nThe gnomAD and ClinVar data suggest that the epitope of PLD5 recognized by a self-reactive TCR is robustly present in humans without any common variation in this region. This suggests that if this TCR is present, it will likely be able to recognize this self-antigen, which improves its possible utility as a TCR targeting a tumor antigen.\n\n\n\n\nReferences\n\nKaranikas, Vaios, Christophe Lurquin, Didier Colau, Nicolas van Baren, Charles De Smet, Bernard Lethe', Thierry Connerotte, et al. 2003. “Monoclonal Anti-MAGE-3 CTL Responses in Melanoma Patients Displaying Tumor Regression After Vaccination with a Recombinant Canarypox Virus.” The Journal of Immunology 171 (9): 4898–4904. https://doi.org/10.4049/jimmunol.171.9.4898.\n\n\nKula, Tomasz, Mohammad H. Dezfulian, Charlotte I. Wang, Nouran S. Abdelfattah, Zachary C. Hartman, Kai W. Wucherpfennig, Herbert Kim Lyerly, and Stephen J. Elledge. 2019. “T-Scan: A Genome-Wide Method for the Systematic Discovery of T Cell Epitopes.” Cell 178 (4): 1016–1028.e13. https://doi.org/10.1016/j.cell.2019.07.009.\n\nCitationBibTeX citation:@online{macqueen2024,\n  author = {MacQueen, Alice},\n  title = {Using {IGV} and {ClinGen} to Assess a Putative Autoimmune\n    Disease Variant},\n  date = {2024-06-18},\n  url = {https://alice-macqueen.github.io/posts/2024-06-03-olga/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nMacQueen, Alice. 2024. “Using IGV and ClinGen to Assess a Putative\nAutoimmune Disease Variant.” June 18, 2024. https://alice-macqueen.github.io/posts/2024-06-03-olga/."
  },
  {
    "objectID": "portfolio/2024-06-03-olga/index.html",
    "href": "portfolio/2024-06-03-olga/index.html",
    "title": "Using OLGA to simulate T-cell receptor sequence diversity to assess genomic assay biases",
    "section": "",
    "text": "T-cell receptor (TCR) proteins are heterodimers, made up of one \\(\\alpha\\) chain (TCRA) and one \\(\\beta\\) chain (TCRB). These sequences each have several hypervariable regions, the most diverse of which is known as the CDR3. In TCRB sequences, the CDR3 is generated by recombination between three genomic sequences, a V-, D-, and J-gene. Up to \\(10^{15}\\) distinct TCRs could, in principle, be formed by V-D-J recombination; this is an extremely large number (e.g., \\(10^{15}\\) meters encompasses our entire solar system to the Oort clouds). About \\(4\\times10^{11}\\) TCRs circulate in an adult human, and about \\(10^{10}\\) of these have unique receptor sequences (Lythe et al. 2016). In meters, \\(10^{11}\\) meters encompasses about six weeks of Earth’s orbit, and \\(10^{10}\\) about four days of Earth’s orbit.\n\n\n\nA V-, D-, and J- gene recombine to form the CDR3 region of each unique T-cell receptor sequence (“clonotype”).\n\n\nAdaptive’s immunosequencing platform has several assays to find the sequences of these hypervariable CDR3 regions. However, these assays differ in several important sequencing features, most importantly in the set of multiplexed PCR primers used to amplify the CDR3 region. Primer changes can lead to changes in cross-priming between assay versions, and these changes can cause consistent, recurrent sequence and gene annotation biases between these assay versions. These biases can cause strong false signals in downstream machine learning approaches such as disease modeling unless they are understood and corrected.\nTo measure and correct assay version-specific biases, I first simulated realistic CDR3 regions of varying lengths, then merged these simulated sequences to assay version-specific V-gene sequences. Fisher’s exact tests on the number of V- & J- gene annotations in each assay were sufficient to reveal any biases between assay versions, after which I could explore workflow changes that reduced these assay biases.\nThe first step in this process is to simulate the CDR3 regions of the TCR sequences. To do this, I use the python package OLGA, which can generate CDR3 sequences using a generative model of V(D)J recombination.\n\n\n\n\n\n\nInstalling OLGA\n\n\n\n\n\nRun pip install olga in your terminal to install OLGA.\n\n\n\nOnce OLGA is installed it can be run from the command line. The following command generates 500K sequences (-n 5e5) using the default generative model settings for human TCRB sequences (--humanTRB) and saves them in the working directory to a file called simulated_tcrb.tsv (-o simulated_tcrb.tsv).\nalice@genegenie ~ % olga-generate_sequences --humanTRB -n 5e5 -o simulated_tcrb.tsv\nStarting sequence generation... \n100000 sequences generated in 3.90 seconds. Estimated time remaining: 15.60 seconds.\n200000 sequences generated in 7.77 seconds. Estimated time remaining: 11.65 seconds.\n300000 sequences generated in 11.80 seconds. Estimated time remaining: 7.87 seconds.\n400000 sequences generated in 15.66 seconds. Estimated time remaining: 3.92 seconds.\n500000 sequences generated in 19.51 seconds. Estimated time remaining: 0.00 seconds.\nCompleted generating all 500000 sequences in 19.51 seconds.\nLet’s visualize the CDR3 sequences OLGA generated and look at some basic visualizations of the data.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(knitr)\n# library(here)\n\ntcrb &lt;- read_delim(\"simulated_tcrb.tsv\",\n  delim = \"\\t\",\n  col_names = c(\"CDR3_nt\", \"CDR3_aa\", \"V_gene\", \"J_gene\"), \n  col_types = \"cccc\"\n  )\n\nThe default table that OLGA generates has four columns: the CDR3 nucleotide & amino acid sequences, and the V- and J-gene selected in V(D)J recombination to generate this CDR3 sequence.\n\ntcrb |&gt;\n  head(n = 15) |&gt;\n  kable()\n\n\n\n\n\n\n\n\n\n\nCDR3_nt\nCDR3_aa\nV_gene\nJ_gene\n\n\n\n\nTGTGCCAGCAGGGTTGGGACCCTAGGAAACACCATATATTTT\nCASRVGTLGNTIYF\nTRBV6-3\nTRBJ1-3\n\n\nTGTGCCAGCAGCGGTCTAGACAGGCGGGGTCATAATTCACCCCTCCACTTT\nCASSGLDRRGHNSPLHF\nTRBV9\nTRBJ1-6\n\n\nTGTGCCAGTAGTGAAGGGACTAGCGGGCCCTCCGGGGAGCTGTTTTTT\nCASSEGTSGPSGELFF\nTRBV19\nTRBJ2-2\n\n\nTGTGCCAGCTTTATGGAGCGCTACGAGCAGTACTTC\nCASFMERYEQYF\nTRBV7-6\nTRBJ2-7\n\n\nTGCAGTGCGCCGGGAGGGGGGAACACTGAAGCTTTCTTT\nCSAPGGGNTEAFF\nTRBV20-1\nTRBJ1-1\n\n\nTGTGCCGGAAAGCCGGGACAGCGCAAGGGGCGCTCTGGAAACACCATATATTTT\nCAGKPGQRKGRSGNTIYF\nTRBV19\nTRBJ1-3\n\n\nTGTGCCAGCAGCTGGGGGACCGGGGAGCTGTTTTTT\nCASSWGTGELFF\nTRBV11-2\nTRBJ2-2\n\n\nTGCAGTGCTAGAGATAAATCTGGACAGGGGTGTAGCAATCAGCCCCAGCATTTT\nCSARDKSGQGCSNQPQHF\nTRBV20-1\nTRBJ1-5\n\n\nTGCAGTGCCCCTTACTATAACACTGAAGCTTTCTTT\nCSAPYYNTEAFF\nTRBV20-1\nTRBJ1-1\n\n\nTGTGCCAGCAGCCAAGATGGACAGAGCTCTGGAAACACCATATATTTT\nCASSQDGQSSGNTIYF\nTRBV4-2\nTRBJ1-3\n\n\nTGCGCCAGCAGCTTGCCTACGCGGGAGGGCCAAGAGACCCAGTACTTC\nCASSLPTREGQETQYF\nTRBV5-1\nTRBJ2-5\n\n\nTGTAGAAATTCCCTCATGAAAAACATTCAGTACTTC\nCRNSLMKNIQYF\nTRBV6-5\nTRBJ2-4\n\n\nTGTGCCACGCTCCCAGGTGGGCAGCCCCAGCATTTT\nCATLPGGQPQHF\nTRBV12-3\nTRBJ1-5\n\n\nTGCGCCAGCAGCTTGACCCCCACTAGCGGGAGTATGAGGAACACCGGGGAGCTGTTTTTT\nCASSLTPTSGSMRNTGELFF\nTRBV5-1\nTRBJ2-2\n\n\nTGTGCCAGCAGCATACTGCAGAACGCCCAGCATTTT\nCASSILQNAQHF\nTRBV3-1\nTRBJ1-5\n\n\n\n\n\nWhat are the lengths of these nucleotide sequences, and how many have each combination of V- and J-gene?\n\ntcrb &lt;- tcrb |&gt; \n  mutate(CDR3_nt_length = nchar(CDR3_nt)) \n\ntcrb |&gt; \n  ggplot(aes(x = CDR3_nt_length)) +\n  geom_histogram(binwidth = 3) +\n  theme_classic(base_size = 12) +\n  labs(x = \"CDR3 length (nt)\", y = \"Count\")\n\n\n\n\n\n\n\n\nCDR3 from 24 to 75 nucleotides in length are represented in this dataset.\n\ntcrb |&gt; \n  ggplot(aes(x = J_gene, y = CDR3_nt_length)) + \n  geom_count() + \n  scale_size_area(max_size = 9) +\n  theme_classic(base_size = 12) +\n  theme(axis.text.x = element_text(hjust = 1, vjust = 1, angle = 45)) +\n  labs(x = \"J-gene\", y = \"CDR3 length (nt)\")\n\n\n\n\n\n\n\n\nSome J-genes are much more commonly used in OLGA’s generative model, such as TCRBJ2-7. Many produce a similar range of CDR3 lengths, at least by eye; TCRBJ2-6 seems to create noticeably longer CDR3 on average.\n\ntcrb |&gt; \n  ggplot(aes(x = V_gene, y = CDR3_nt_length)) + \n  geom_count() + \n  scale_size_area(max_size = 6) +\n  theme_classic(base_size = 12) +\n  theme(axis.text.x = element_text(hjust = 1, vjust = 1, angle = 45)) +\n  labs(x = \"V-gene\", y = \"CDR3 length (nt)\")\n\n\n\n\n\n\n\n\nFinally, there is quite a range in the number of CDR3 generated using each V-gene in OLGA’s generative model. V-genes like TCRBV16 are rarely used to make functional CDR3, while V-genes like TCRBV20-1 and TCRBV7-9 are very commonly used to generate CDR3.\n\n\n\n\nReferences\n\nLythe, Grant, Robin E. Callard, Rollo L. Hoare, and Carmen Molina-París. 2016. “How Many TCR Clonotypes Does a Body Maintain?” Journal of Theoretical Biology 389 (January): 214–24. https://doi.org/10.1016/j.jtbi.2015.10.016.\n\nCitationBibTeX citation:@online{macqueen2024,\n  author = {MacQueen, Alice},\n  title = {Using {OLGA} to Simulate {T-cell} Receptor Sequence Diversity\n    to Assess Genomic Assay Biases},\n  date = {2024-06-03},\n  url = {https://alice-macqueen.github.io/posts/2024-06-03-olga/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nMacQueen, Alice. 2024. “Using OLGA to Simulate T-Cell Receptor\nSequence Diversity to Assess Genomic Assay Biases.” June 3, 2024.\nhttps://alice-macqueen.github.io/posts/2024-06-03-olga/."
  },
  {
    "objectID": "portfolio/2024-04-03-heritability/index.html",
    "href": "portfolio/2024-04-03-heritability/index.html",
    "title": "Calculating narrow-sense heritability",
    "section": "",
    "text": "Narrow-sense heritability, or h2, is a descriptive statistic calculated by geneticists and crop breeders prior to modeling the association between a trait (such as height or yield) and molecular variation present in a population (such as single nucleotide polymorphisms, or SNPs).\nIt varies between 0 and 1 and is a measure of the fraction of the total variation in a trait attributable to additive effects of the molecular variation present in the group of individuals where the trait was measured. If it’s zero, or as a rule of thumb, 0.2 or less, there is little additive genetic variation for that trait, and any modeling of the association between the trait and molecular variation is likely to be unsuccessful.\nHere I calculate h2 for biomass data in the switchgrass diversity panel dataset.\nTo calculate h2, I need trait data for my group of interest (total biomass for genotypes in the switchgrass diversity panel data, at the Austin, Texas site, in 2019) and a kinship matrix. The kinship matrix here contains information about how the switchgrass individuals are genetically related to one another. I’ve pre-calculated the kinship matrix for these individuals using the Van Raden method (VanRaden 2008).\nThere are many factors that go in to making the kinship matrix, but I won’t go into the details of that here.\nFirst, load the R packages I’ll need to compute this statistic and load the kinship matrix.\n\n#|\nlibrary(tidyverse)\nlibrary(here)\nlibrary(rrBLUP)\nlibrary(switchgrassGWAS)\n\nk_full &lt;- read_rds(here(\"data\", \"Kinship_van_Raden_630_individuals_SNPs_r2_20percent.rds\"))\n\nThe kinship matrix is a matrix with column and row names that are individual plant IDs (PLANT_ID in the trait dataframe).\n\nstr(k_full)\n\n num [1:630, 1:630] 1.3406 0.0871 0.0746 0.0404 0.1924 ...\n - attr(*, \"dimnames\")=List of 2\n  ..$ : chr [1:630] \"J181.A\" \"J250.C\" \"J251.C\" \"J352.A\" ...\n  ..$ : chr [1:630] \"J181.A\" \"J250.C\" \"J251.C\" \"J352.A\" ...\n\nk_full[1:5, 1:5]\n\n           J181.A     J250.C     J251.C     J352.A     J001.A\nJ181.A 1.34059943 0.08712208 0.07459743 0.04039814 0.19244956\nJ250.C 0.08712208 1.25057146 0.30333836 0.09003609 0.14031216\nJ251.C 0.07459743 0.30333836 1.26267550 0.05864841 0.16804045\nJ352.A 0.04039814 0.09003609 0.05864841 1.35194085 0.04047479\nJ001.A 0.19244956 0.14031216 0.16804045 0.04047479 1.18593277\n\n\nNext, load the trait data. Here I am going to use the publicly available trait data from the switchgrassGWAS R package.\n\ntrait_data &lt;- switchgrassGWAS::pvdiv_phenotypes\n\nTo calculate narrow-sense heritability for one trait, CLMB_BIOMASS, I need to manipulate the trait dataframe so that the PLANT_ID included match the ones in the kinship matrix.\n\none_trait &lt;- trait_data |&gt;\n1  filter(!is.na(CLMB_BIOMASS)) |&gt;\n2  filter(PLANT_ID %in% colnames(k_full))\n\n\n1\n\nFilter individuals to those with data in the CLMB_BIOMASS column\n\n2\n\nFilter individuals to those with PLANT_ID that match the names in the kinship matrix.\n\n\n\n\nThen, I need to make sure that the same PLANT_ID are present in the kinship matrix and in the dataframe, in the same order. To do this, first I find the numerical values of the column names that are in the trait dataframe, then I subset the kinship matrix to just those values.\n\nk_in_phe &lt;- which(colnames(k_full) %in% one_trait$PLANT_ID)\nk_one &lt;- k_full[k_in_phe, k_in_phe]\n\nThen, make sure that the PLANT_ID in the trait dataframe are in the same order as those in the kinship matrix by making the PLANT_ID from the kinship matrix into a dataframe, and joining the trait dataframe to it.\n\nk_order &lt;- enframe(colnames(k_one), name = NULL, value = \"PLANT_ID\")\none_trait &lt;- k_order |&gt;\n  left_join(one_trait, by = \"PLANT_ID\")\n\nFinally, check that all the PLANT_ID in the two dataframes are equal.\n\nall.equal(k_order, select(one_trait, PLANT_ID))\n\n[1] TRUE\n\n\nNow, we used mixed.solve() from the rrBLUP package to calculate both the additive genetic variation (Vu) and the error variation in the trait (Ve). Added together, Vu and Ve make up the total trait variation in the population.\n\nmod2 &lt;- mixed.solve(y = one_trait$CLMB_BIOMASS, K = k_one)\n\nh2 &lt;- mod2$Vu / (mod2$Vu + mod2$Ve)\n\nround(h2, digits = 4)\n\n[1] 0.8923\n\n\nh2 for the biomass at CLMB is 0.8923. This is a very high heritability, suggesting that additive SNP-trait associations may explain much of the trait variation at this location.\n\n\n\n\nReferences\n\nVanRaden, P. M. 2008. “Efficient Methods to Compute Genomic Predictions.” Journal of Dairy Science 91 (11): 4414–23. https://doi.org/10.3168/jds.2007-0980.\n\nCitationBibTeX citation:@online{macqueen2024,\n  author = {MacQueen, Alice},\n  title = {Calculating Narrow-Sense Heritability},\n  date = {2024-04-03},\n  url = {https://alice-macqueen.github.io/posts/2024-04-03-heritability/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nMacQueen, Alice. 2024. “Calculating Narrow-Sense\nHeritability.” April 3, 2024. https://alice-macqueen.github.io/posts/2024-04-03-heritability/."
  }
]